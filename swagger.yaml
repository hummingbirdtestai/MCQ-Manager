openapi: 3.0.0
info:
  title: MCQ Manager API
  version: 1.0.0
  description: API documentation for MCQ Manager

servers:
  - url: https://mcq-manager-production.up.railway.app

tags:
  - name: Subjects
  - name: Topics
  - name: Users
  - name: Colleges
  - name: Auth
    description: Authentication via Twilio OTP
  - name: AI Content
    description: GPT-Generated Step-wise Content

# ⬇ Full paths block continues here
paths:
  /auth/otp/start:
    post:
      tags: [Auth]
      summary: Send OTP to phone number using Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+919876543210"
      responses:
        '200': { description: OTP sent successfully }
        '400': { description: Invalid phone number format }
        '500': { description: Failed to send OTP }

  /auth/otp/verify:
    post:
      tags: [Auth]
      summary: Verify OTP for a given phone number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+919876543210"
                code:
                  type: string
                  example: "123456"
      responses:
        '200': { description: OTP verified successfully }
        '400': { description: Invalid OTP or phone number }
        '500': { description: Failed to verify OTP }

  /generate-topic-step123:
    post:
      tags: [AI Content]
      summary: Generate Step 1–3 JSON content using GPT-4
      description: Generate high-yield clinical content (Steps 1–3) for a given topic and save it in Supabase.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topic_id
                - topic_title
              properties:
                topic_id:
                  type: string
                  example: "f9aa24b4-94c4-11ee-8c99-0242ac120002"
                topic_title:
                  type: string
                  example: "Describe composition of bone and bone marrow"
      responses:
        '200':
          description: Step 1–3 content generated and stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ✅ Step 1–3 content generated and stored
                  data:
                    type: object
        '400':
          description: Missing topic_id or topic_title
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: topic_id and topic_title are required
        '500':
          description: GPT generation or Supabase error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: GPT generation failed

  /generate-topic-step4:
    post:
      tags: [AI Content]
      summary: Generate Step 4 clinical reasoning chat using GPT
      description: Generate USMLE-style clinical reasoning chat (Step 4) for a given topic and upload to Supabase.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topic_id
                - topic_title
              properties:
                topic_id:
                  type: string
                  example: "f9aa24b4-94c4-11ee-8c99-0242ac120002"
                topic_title:
                  type: string
                  example: "Describe composition of bone and bone marrow"
      responses:
        '200':
          description: Step 4 content successfully generated and saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ✅ Step 4 content generated and stored
                  data:
                    type: object
        '400':
          description: Missing topic_id or topic_title
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: topic_id and topic_title are required
        '500':
          description: GPT generation or Supabase error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: GPT generation failed

  /generate-topic-step5:
    post:
      tags: [AI Content]
      summary: Generate Step 5 MCQs using GPT
      description: >
        Generate 10 USMLE-style clinical vignette-based MCQs (Step 5) with learning gap mapping 
        for a given topic and upload them to Supabase under the specified topic ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topic_id
                - topic_title
              properties:
                topic_id:
                  type: string
                  example: "f9aa24b4-94c4-11ee-8c99-0242ac120002"
                topic_title:
                  type: string
                  example: "Demonstrate normal anatomical position, various planes, relation, comparison, laterality & movement in our body"
      responses:
        '200':
          description: Step 5 MCQs successfully generated and stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ✅ Step 5 MCQs generated and stored
                  data:
                    type: object
        '400':
          description: Missing topic_id or topic_title
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: topic_id and topic_title are required
        '500':
          description: GPT generation or Supabase error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: GPT generation failed

  /generate-topic-step6:
    post:
      tags: [AI Content]
      summary: Generate Step 6 Media Library using GPT
      description: >
        Generates 10 high-yield videos and 10 high-yield images for a topic's Media Library (Step 6),
        including keywords and descriptions. Saves the result into Supabase under `topic_uploads`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topic_id
                - topic_title
              properties:
                topic_id:
                  type: string
                  example: "b690fa21-8239-491f-b035-938b93062558"
                topic_title:
                  type: string
                  example: "Superior intercostal artery"
      responses:
        '200':
          description: Step 6 content successfully generated and stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ✅ Step 6 content successfully generated and stored
                  data:
                    type: object
        '400':
          description: Missing or invalid input/structure
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing or invalid Step 6 content structure
        '500':
          description: GPT or Supabase error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to generate Step 6 content

  /users/register:
    post:
      tags: [Users]
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - country_code
                - phone
                - email
                - name
                - medical_college_id
                - year_of_joining
              properties:
                country_code:
                  type: string
                  example: '+91'
                phone:
                  type: string
                  example: '9999999999'
                email:
                  type: string
                  example: 'student@example.com'
                name:
                  type: string
                  example: 'John Doe'
                photograph_url:
                  type: string
                  example: 'https://example.com/photo.jpg'
                medical_college_id:
                  type: string
                year_of_joining:
                  type: integer
                  example: 2023
      responses:
        '201': { description: User registered }

  /users/status/{phone}:
    get:
      tags: [Users]
      summary: Check if user is registered and active
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
          example: "+919876543210"
      responses:
        '200':
          description: User status returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  isActive:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "e123..."
                      name:
                        type: string
                        example: "John Doe"
                      phone:
                        type: string
                        example: "9999999999"
                      registration_status:
                        type: string
                        example: "Active"
                      email:
                        type: string
                        example: "john@example.com"
                      medical_college_id:
                        type: string
                        example: "abcd1234"
                      year_of_joining:
                        type: integer
                        example: 2022
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  isActive:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: User not found
        '500':
          description: Server error while checking status
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /users/status:
    patch:
      tags:
        - Users
      summary: Toggle user registration status (Active <-> Inactive)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - country_code
                - phone
              properties:
                country_code:
                  type: string
                  example: "+91"
                phone:
                  type: string
                  example: "9876543210"
      responses:
        '200':
          description: Updated user status returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
        '400':
          description: Missing phone or country code
        '404':
          description: User not found
        '500':
          description: Failed to toggle status

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user profile
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: User profile }

  /colleges:
    post:
      tags: [Colleges]
      summary: Add colleges
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name: { type: string }
                  city: { type: string }
                  state: { type: string }
                  ownership:
                    type: string
                    enum: [Government, Private]
      responses:
        '201': { description: Colleges added }

    get:
      tags: [Colleges]
      summary: Get all colleges
      responses:
        '200': { description: List of medical colleges }

  /subjects:
    post:
      tags: [Subjects]
      summary: Create subjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name: { type: string }
      responses:
        '201': { description: Subjects created }

    get:
      tags: [Subjects]
      summary: Get all subjects
      responses:
        '200': { description: List of subjects }

  /subjects/{subjectId}/chapters:
    post:
      tags: [Subjects]
      summary: Add chapters and topics to a subject
      parameters:
        - in: path
          name: subjectId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chapters:
                  type: array
                  items:
                    type: object
                    properties:
                      name: { type: string }
                      topics:
                        type: array
                        items:
                          type: object
                          properties:
                            name: { type: string }
      responses:
        '201': { description: Chapters and topics created }

  /topics/{topicId}/uploads:
    post:
      tags: [Topics]
      summary: Upload or merge steps for a topic (Step 1 to Step 6)
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  properties:
                    steps:
                      type: array
                      items:
                        type: object
                        properties:
                          step: { type: integer }
                          content:
                            type: array
                            items:
                              type: object
                              properties:
                                sender: { type: string }
                                html: { type: string }
                                buzzword: { type: string }
                                highYieldPoint: { type: string }
                                clarifyingFact: { type: string }
      responses:
        '201': { description: Steps uploaded / merged successfully }

    get:
      tags: [Topics]
      summary: Get merged steps for a topic
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Merged steps content
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      type: object
                      properties:
                        step: { type: integer }
                        content:
                          type: array
                          items:
                            type: object
                            properties:
                              sender: { type: string }
                              html: { type: string }
                              buzzword: { type: string }
                              highYieldPoint: { type: string }
                              clarifyingFact: { type: string }

    delete:
      tags: [Topics]
      summary: Delete all uploads for a topic
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      responses:
        '200': { description: All uploads deleted }

  /topics/{topicId}/mcqs:
    post:
      tags: [Topics]
      summary: Upload 10 MCQs for a topic
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mcqs:
                  type: array
                  items:
                    type: object
                    properties:
                      learning_gap: { type: string }
                      stem: { type: string }
                      options:
                        type: object
                        properties:
                          A: { type: string }
                          B: { type: string }
                          C: { type: string }
                          D: { type: string }
                          E: { type: string }
                      correct_answer: { type: string }
                      explanation: { type: string }
      responses:
        '201': { description: MCQs uploaded successfully }
        '400': { description: Must upload exactly 10 MCQs }

    get:
      tags: [Topics]
      summary: Get MCQs for a topic
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      responses:
        '200': { description: List of MCQs }

  /topics/{topicId}/mcqs/start-test:
    post:
      tags: [Topics]
      summary: Start MCQ test session
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Test session started }

  /topics/{topicId}/mcqs/{mcqId}/submit:
    post:
      tags: [Topics]
      summary: Submit answer for MCQ
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
        - in: path
          name: mcqId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: string }
                selected_answer:
                  type: string
                  enum: [A, B, C, D, E, S]
      responses:
        '200': { description: Answer submitted }

  /topics/{topicId}/leaderboard:
    get:
      tags: [Topics]
      summary: Get leaderboard for a topic
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Leaderboard }

  /topics/{topicId}/mcqs/{mcqId}/leaderboard-status:
    get:
      tags: [Topics]
      summary: Get leaderboard status for user and MCQ
      parameters:
        - in: path
          name: topicId
          required: true
          schema: { type: string }
        - in: path
          name: mcqId
          required: true
          schema: { type: string }
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Leaderboard + user status }
